from langgraph.graph import StateGraph
from typing import TypedDict,Dict,List
from pydantic import BaseModel
class GraphState(TypedDict):
    """
    Represents the state of our graph.
    Attributes:
        user_prompt: the initial question of the user
        check_sql: check if sql operations from db are required to answer question
        check_graph: check if user queries involve plotting graph
        sql_query: the sql query for db operations
        fetched_rows: rows fetched after sql query
        graph_data: graph data as per user request
        generated_answer: final answer generated by llm
    """
    user_prompt: str
    check_sql: bool
    check_graph: bool
    sql_query:str
    fetched_rows: Dict
    graph_data: Dict
    generated_answer: str

class check_sql_and_graph(BaseModel):
    check_sql:bool
    check_graph:bool

class graphData(BaseModel):
    """
    Represent the coordinates and the titles of x and y axis
    Attributes:
        coords: All the points in the 2D graph
        x_title: Title of x axis
        y_title: Title of y axis
    """
    coords : List[Dict[int,int]]
    x_title:str
    y_title:str